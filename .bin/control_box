#!/usr/bin/env zsh

_total="/var/log/update_total.log"
_user_dir="XDG_RUNTIME_DIR=/run/user/1000"
_user="beyond9thousand"

_check_total(){
    eww update total=$(awk '{print}' $_total)
}

_update_count(){
    declare -a _items=()
    while read -r line; do
        _items+=("$line")
    done < <(checkupdates)

    seq ${#_items} | while read -r index; do
        _name="${_items[$index]}"
        if [[ $(echo $_name | grep "zen") ]]; then
            sudo -u $_user $_user_dir dunstctl close-all
            sudo -u $_user $_user_dir dunstify -r 404 -u critical \
                "Report" "Kernel updates available"
        fi
    done

    if [[ ${#_items[@]} -gt 0 ]]; then
        echo "${#_items[@]}" > $_total
    else
        echo "0" > $_total
    fi
}

report(){
    alias _pid="ps o cmd p"

    if [[ ! $(pidof "$1") ]]; then
        dunstify -C 999
        $1 &
    else
        node_focus=($(bspc query --desktop focused.focused --nodes))
        seq ${#node_focus} | while read -r index; do
            node_id=$(print "${node_focus[$index]}")
            if [[ $(_pid $(xdo pid $node_id) 2>/dev/null | awk '(NR==2)') == "$1" ]]; then
                bspc node $node_id -c
                dunstify -r 999 -t 5000 -u critical "Report" "Closed $1"
                exit
            fi
        done
        node_total=($(bspc query --desktop '.!focused' --nodes))
        seq ${#node_total} | while read -r index; do
            node_id=$(print "${node_total[$index]}")
            if [[ $(_pid $(xdo pid $node_id) 2>/dev/null | awk '(NR==2)') == "$1" ]]; then
                bspc node $node_id --to-desktop focused.focused
            fi
        done
    fi

    unalias _pid
}

_terminal_float(){
    _condition="$(slop 2>/dev/null)"
    if [[ $_condition != "" ]]; then
        bspc rule -a Alacritty -o state=floating rectangle="${_condition}" && alacritty
    fi
}

case "$1" in
    -bspres)
        bspc wm -r &
        ;;
    -ewwopen)
        if [[ ! $(pidof eww) ]]; then
            eww daemon
        fi
        if [[ ! $(eww windows | grep "*taskbar") ]]; then
            eww open taskbar
        fi
        ;;
    -ewwclose)
        killall eww
        bspc config top_padding 0
        ;;
    -ewwhalt)
        eww close-all
        ;;
    -ewwreload)
        if [[ $(pidof eww) ]]; then
            control_box -ewwhalt
            control_box -ewwopen
            dunstify -r 888 "EWW" "Taskbar has been reloaded"
        else
            dunstify -u critical -r 888 "EWW" "Taskbar is not running"
        fi
        ;;
    -polybres)
        poly-reset
        ;;
    -kbres)
        pkill -USR1 -x sxhkd && dunstify --replace=69 -i keyboard "Restarted SXHKD"
        ;;
    -soundres)
        systemctl --user restart pipewire.service pipewire-pulse.socket
        sleep 0.2
        control_box -ewwreload; dunstify --replace=699 -i audio-speakers "Restarted Pipewire"
        ;;
    -wclass)
        dunstify -i window_list "Find Window Class" "$(xprop WM_CLASS | tr -d '\n' \
          | xclip -sel c -f)"
        ;;
    -wallres)
        nitrogen --set-zoom-fill --save --random Pictures/Wallpapers
        ;;
    -monitor)
        report "gnome-system-monitor"
        ;;
    -pavu_toggle)
        report "pavucontrol"
        ;;
    -sloppy)
        _terminal_float
        ;;
    -updates)
        _update_count
        ;;
    *)
        dunstctl close-all
        dunstify -u critical -r 699 "Control Box" "Unknown option"
        echo "Unknown option"
        ;;
esac
